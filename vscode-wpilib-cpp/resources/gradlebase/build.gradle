import jaci.openrio.gradle.wpi.toolchain.WPIToolchainPlugin
import jaci.gradle.nativedeps.NativeLib

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jcraft:jsch:0.1.53'
//        classpath group: 'jaci.gradle', name: 'EmbeddedTools', version: '2017.12.23'
        classpath group: 'gradle.plugin.jaci.gradle', name: 'DeployTools', version: '2018.02.04'
        classpath group: 'de.undercouch', name: 'gradle-download-task', version: '3.1.2'
        classpath group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
        classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '2018.05.17'
    }
}

plugins {
    id "java"
    id "cpp"
    id "eclipse"
    id "idea"
    id "visual-studio"
    id 'com.gradle.build-scan' version '1.9'
    id "com.dorongold.task-tree" version "1.3"
}
apply plugin: 'jaci.openrio.gradle.GradleRIO'

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

def TEAM = 5333

if (project.hasProperty('teamNumber')) {
    TEAM = teamNumber.toInteger()
}

def useDebug = false

if(project.hasProperty('debugMode')) {
    useDebug = true;
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcNative', jaci.openrio.gradle.frc.FRCNativeArtifact) {
            targets << "roborio"
            component = 'frcUserProgram'
            debug = useDebug;
        }
    }
}

// Defining my C++ project. In this case, it is called 'frcUserProgram',
// and is of the language C++.
model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            // Target the RoboRIO (arm-frc-linux-gnueabihf)
            targetPlatform 'roborio'
            binaries.all {
              cppCompiler.args << '-g' << '-g3'
            }
            sources.cpp {
                // This is where our source files are located (src/cpp for C++ files, src/include for headers)
                source {
                    srcDirs = ['src/cpp']
                    include '**/*.cpp'
                }
                exportedHeaders{
                    srcDirs = ['src/cpp', 'src/include']
                    include '**/*.hpp', '**/*.h'
                }

                // Define my dependencies. In this case, WPILib (+ friends), CTRE Phoenix (Talon SRX) and NavX.
                lib library: "wpilib"
                lib library: "ctre"
                lib library: "navx"
                lib library: "openrio.powerup.matchData"
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}
